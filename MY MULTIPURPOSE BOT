import discord
from discord.ext import commands
from time import time
import youtube_dl
from pytube import YouTube
from youtube_dl import YoutubeDL
from youtubesearchpython import VideosSearch
import yt_dlp
import datetime
import random
import os
from collections import defaultdict
from random import shuffle
import json
from discord import Member
from discord.ext.commands import has_permissions
import asyncio
import re
from discord.utils import get
import requests
from discord import TextChannel
from datetime import datetime
import gpt_2_simple as gpt2
from discord.ext.commands import has_permissions as has_perms
import openai
from flask import Flask
import requests

#intends and prefix commands .....................................
intents = discord.Intents.all()
client=commands.Bot(command_prefix ='&',intents=intents)
songs_folder = "Songs"
playlists = defaultdict(list)
current_song_index = defaultdict(int)
playlist_file = "playlists.json"

#playlist in json file....................................
if os.path.isfile(playlist_file):
    with open(playlist_file, "r") as file:
        saved_playlists = json.load(file)
        playlists.update(saved_playlists)

#save playlist ...................................
def save_playlists():
    with open(playlist_file, "w") as file:
        json.dump(playlists, file)

#showing that the bot has started..................................
@client.event
async def on_ready():
    await client.change_presence(status=discord.Status.idle,activity=discord.Game(type=discord.ActivityType.listening,name='&commands'))
    print("Started")

#administrator.........................................................
@client.event
async def on_ready():
    print("Bot is ready.")
    for guild in client.guilds:
        await ensure_administrator_role(guild)
        
async def ensure_administrator_role(guild):
    administrator_role = discord.utils.get(guild.roles, name="Administrator")
    if not administrator_role:
        administrator_role = await guild.create_role(name="Administrator")
    
    if administrator_role not in guild.me.roles:
        
        await guild.me.add_roles(administrator_role)

#status command .................................................
@client.command()
async def status(ctx):
    await ctx.send("This bot is under construction . Please wait patiently")

#ping command............................................
@client.command()
async def ping(ctx):
    if round(client.latency * 1000) <= 50:
        embed=discord.Embed(title="PING", description=f"The ping is **{round(client.latency *1000)}** milliseconds!", color=0x44ff44)
    elif round(client.latency * 1000) <= 100:
        embed=discord.Embed(title="PING", description=f"The ping is **{round(client.latency *1000)}** milliseconds!", color=0xffd000)
    elif round(client.latency * 1000) <= 200:
        embed=discord.Embed(title="PING", description=f"The ping is **{round(client.latency *1000)}** milliseconds!", color=0xff6600)
    else:
        embed=discord.Embed(title="PING", description=f"The ping is **{round(client.latency *1000)}** milliseconds!", color=0x990000)
    await ctx.send(embed=embed)

#show commands command ............................................   
@client.command()
async def commands(ctx):
    music_commands = [
        ("connect", "Connects the bot to a voice channel. Syntax: `&connect`"),
        ("leave", "Disconnects the bot from the voice channel. Syntax: `&leave`"),
        ("pause", "Pauses the currently playing song. Syntax: `&pause`"),
        ("resume", "Resumes the paused song. Syntax: `&resume`"),
        ("stop", "Stops the currently playing song. Syntax: `&stop`"),
        ("play", "Plays a song or playlist. Syntax: `&play [playlist] [song_no]`"),
        ("createplaylist", "Creates a new playlist. Syntax: `&createplaylist [name]`"),
        ("add", "Adds songs to a playlist. Syntax: `&add [playlist] [song_choice]`"),
        ("showplaylist", "Shows the songs in a playlist. Syntax: `&showplaylist [name]`"),
        ("deleteplaylist", "Deletes a playlist. Syntax: `&deleteplaylist [name]`"),
        ("showplaylists", "Shows all playlists. Syntax: `&showplaylists`"),
        ("showallsongs", "Shows all available songs. Syntax: `&showallsongs`"),
        ("deletesong", "Deletes a song. Syntax: `&deletesong [playlist] [song_no]`")
    ]

    moderation_commands = [
        ("setroles", "Sets roles allowed for commands. Syntax: `&setroles [cmd] [role]`"),
        ("kick", "Kicks a member. Syntax: `&kick [member] [reason]`"),
        ("ban", "Bans a member. Syntax: `&ban [member] [reason]`"),
        ("mute", "Mutes a member. Syntax: `&mute [member]`"),
        ("unmute", "Unmutes a member. Syntax: `&unmute [member]`"),
        ("addrole", "Adds a role. Syntax: `&addrole [member] [role]`"),
        ("removerole", "Removes a role. Syntax: `&removerole [member] [role]`"),
        ("add_banned_word", "Adds a banned word. Syntax: `&add_banned_word [word]`"),
        ("remove_banned_word", "Removes a banned word. Syntax: `&remove_banned_word [word]`")
    ]

    game_commands = [
        ("truth", "Random truth. Syntax: `&truth`"),
        ("dare", "Random dare. Syntax: `&dare`")
    ]

    general_commands = [
        ("status", "Shows bot status. Syntax: `&status`"),
        ("ping", "Shows ping. Syntax: `&ping`"),
        ("time", "Shows time. Syntax: `&time`"),
        ("owners", "Shows bot owners. Syntax: `&owners`"),
        ("suggest", "Gives suggestion form. Syntax: `&suggest`")
    ]

    embed = discord.Embed(
        title="🤖 Bot Command List",
        description="Here are all my available commands, grouped by category:",
        color=discord.Color.teal()
    )

    embed.set_thumbnail(url=client.user.avatar.url if client.user.avatar else None)
    embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar.url)

    # Music Commands
    embed.add_field(
        name="🎵 Music Commands",
        value="\n".join(f"**`&{cmd}`** — {desc}" for cmd, desc in music_commands),
        inline=False
    )

    # Moderation Commands
    embed.add_field(
        name="⚙️ Moderation Commands",
        value="\n".join(f"**`&{cmd}`** — {desc}" for cmd, desc in moderation_commands),
        inline=False
    )

    # Game Commands
    embed.add_field(
        name="🎮 Game Commands",
        value="\n".join(f"**`&{cmd}`** — {desc}" for cmd, desc in game_commands),
        inline=False
    )

    # General Commands
    embed.add_field(
        name="ℹ️ General Commands",
        value="\n".join(f"**`&{cmd}`** — {desc}" for cmd, desc in general_commands),
        inline=False
    )

    await ctx.send(embed=embed)


#time command .......................................................
@client.command()
async def time(ctx):
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    await ctx.send(f'The current time is: {current_time}')

#owners command ...................................................
@client.command()
async def owners(ctx):
    await ctx.send("This is an initiative set by amateurs.")     

#connect command .....................................................
@client.command(pass_context=True)
async def connect(ctx):
    if (ctx.author.voice):
        channel = ctx.message.author.voice.channel
        await channel.connect()
        await ctx.send("Connected")
      
    else:
        await ctx.send("Connect to the voice channel first")

#leave command .......................................................       
@client.command(pass_context=True)
async def leave(ctx):
    if (ctx.voice_client):
        await ctx.guild.voice_client.disconnect()
        await ctx.send("Left the voice channel")
    else:
        await ctx.send("I am already disconnected")

#pause command ...........................................................
@client.command(pass_context=True)
async def pause(ctx):
    if (ctx.author.voice):
      voice=discord.utils.get(client.voice_clients,guild=ctx.guild)
      if voice.is_playing():
         voice.pause()
      else:
         await ctx.send("The voice is already paused")
    else:
        await ctx.send('Please connect to voice channel first')
        
#stop command ............................................................
@client.command(pass_context=True)
async def stop(ctx):
    if (ctx.author.voice):
        voice=discord.utils.get(client.voice_clients,guild=ctx.guild)
        voice.stop()
        await ctx.send("The voice has been stopped") 
    else:
        await ctx.send("Please connect to the voice channel first")

#resume command ..........................................................       
@client.command(pass_context=True)
async def resume(ctx):
    voice=discord.utils.get(client.voice_clients,guild=ctx.guild)
    if (ctx.author.voice):
        if voice.is_paused():
          voice.resume()
        else:
          await ctx.send("The voice is already running")  
    else:
        await ctx.send("Please connect to the voice channel first")

#play command.............................................
@client.command()
async def play(ctx, playlist_name: str = None, song_number: int = None):
    global current_song_index

    voice_channel = ctx.author.voice.channel

    voice_client = ctx.voice_client
    if voice_client:
        await voice_client.disconnect()

    voice_client = await voice_channel.connect()

    if playlist_name:
        if playlist_name.lower() in playlists:
            selected_playlist = playlists[playlist_name.lower()]

            if song_number is not None and 1 <= song_number <= len(selected_playlist):
                song_index = song_number - 1  # Adjust for 0-based indexing
                source = os.path.join(songs_folder, selected_playlist[song_index])
                voice_client.play(discord.FFmpegPCMAudio(source))
                await ctx.send(f"Now playing: {selected_playlist[song_index]}")
            else:
                await ctx.send("Invalid song number. Please specify a valid song number.")
        else:
            await ctx.send(f"The '{playlist_name}' playlist does not exist. Use the &createplaylist command to create it.")
    else:
        await ctx.send("Please provide a playlist name as input.")


#create playlist..........................................
@client.command()
async def createplaylist(ctx, playlist_name: str):
    if playlist_name.lower() not in playlists:
        playlists[playlist_name.lower()] = []
        current_song_index[playlist_name.lower()] = 0
        await ctx.send(f"Playlist '{playlist_name}' created.")
        save_playlists()
    else:
        await ctx.send(f"The playlist '{playlist_name}' already exists.")

#add songs to playlist.........................
@client.command()
async def add(ctx, playlist_name: str, *, song_choice: str):
    if playlist_name.lower() not in playlists:
        await ctx.send(f"The playlist '{playlist_name}' does not exist. Use the &createplaylist command to create it.")
        return

    songs = [f for f in os.listdir(songs_folder) if f.endswith('.mp3')]
    if not songs:
        await ctx.send("No songs found in the 'songs' folder.")
        return

    song_choice = song_choice.lower()
    matching_songs = [song for song in songs if song_choice in song.lower()]

    if not matching_songs:
        await ctx.send(f"No songs matching '{song_choice}' found in the 'songs' folder.")
        return

    playlists[playlist_name.lower()].extend(matching_songs)
    await ctx.send(f"{len(matching_songs)} song(s) added to the '{playlist_name}' playlist.")
    save_playlists()    

#Showplaylist songs ...........................................
@client.command()
async def showplaylist(ctx, playlist_name: str):
    if playlist_name.lower() not in playlists:
        await ctx.send(f"The playlist '{playlist_name}' does not exist. Use the &createplaylist command to create it.")
        return

    selected_playlist = playlists[playlist_name.lower()]

    if not selected_playlist:
        await ctx.send(f"The '{playlist_name}' playlist is empty. Use the &add command to add songs to it.")
        return

    await ctx.send(f"Current Playlist '{playlist_name}':")
    for i, song in enumerate(selected_playlist, start=1):
        await ctx.send(f"{i}. {song}")

#Delete playlists.......................
@client.command()
async def deleteplaylist(ctx, playlist_name: str):
    if playlist_name.lower() in playlists:
        del playlists[playlist_name.lower()]
        await ctx.send(f"Playlist '{playlist_name}' deleted.")
        save_playlists()
    else:
        await ctx.send(f"The playlist '{playlist_name}' does not exist.")

#Show all playlists..........................
@client.command()
async def showplaylists(ctx):
    if not playlists:
        await ctx.send("No playlists found.")
        return

    playlist_names = list(playlists.keys())
    await ctx.send(f"Total playlists: {len(playlist_names)}")
    await ctx.send("Playlist names:")
    await ctx.send("\n".join(playlist_names))

#Total songs available.................
@client.command()
async def showallsongs(ctx):
    songs = [f for f in os.listdir(songs_folder) if f.endswith('.mp3')]
    total_songs = len(songs)
    
    if total_songs > 0:
        song_list = "\n".join(songs)
        await ctx.send(f"Total songs in the 'songs' folder: {total_songs}\nSongs:\n{song_list}")
    else:
        await ctx.send("No songs found in the 'songs' folder.")

#edit playlist......................
@client.command()
async def deletesong(ctx, playlist_name: str, song_number: int=None):
    if not playlist_name:
        await ctx.send("Please provide a playlist name.")
        return

    if not song_number:
        await ctx.send("Please specify the song number to remove.")
        return

    if playlist_name.lower() not in playlists:
        await ctx.send(f"The '{playlist_name}' playlist does not exist.")
        return

    selected_playlist = playlists[playlist_name.lower()]

    if 1 <= song_number <= len(selected_playlist):
        song_index = song_number - 1
        removed_song = selected_playlist.pop(song_index)
        save_playlists()  

        await ctx.send(f"Removed song '{removed_song}' from the '{playlist_name}' playlist.")
    else:
        await ctx.send("Invalid song number. Please specify a valid song number.")

#Truth game .................................................(Upgrade it on a daily basis)
@client.command(pass_context=True)
async def truth(ctx):
    a="Do you have a girlfriend?"
    b="Who was your first kiss?"
    c="Who do you have crush on?"
    d="What's the most embarrassing moment of your life?"
    e="What's your favourite sport?"
    f="When was the last time you cried?"
    g="What's your biggest fear? (not philosophical)"
    h="Your best ever pickup line?"
    i="Who is your comfort character?"
    j="What's your weirdest fantasy?"
    l1=[a,b,c,d,e,f,g,h,i,j]
    shuffle(l1)
    embed=discord.Embed(title="TRUTH" , description=l1[0],color=0x44ff44)
    await ctx.send(embed=embed)

#Dare game.............................................................(Upgrade it on a daily basis)
@client.command(pass_context=True)
async def dare(ctx):
    a="Dance with your underwear in your hand"
    b="Sing a song on the top of your lungs from your window"
    c="Put on a frock on your neck and dance on Hotel California"
    d="Call a random number and talk like you are their previous reincarnation's partner"
    e="Show your weirdest photo available"
    f="Jump on your bed thrice and shout MarcoPolo"
    g="Speak out your will as if your funeral is tomorrow"
    h="Put your craziest clip online"
    i="Kiss an item from your room (tongue involved)"
    j="Balance a steel utensil on your nose and walk around for 30 seconds."
    l2=[a,b,c,d,e,f,g,h,i,j]
    shuffle(l2)
    embed=discord.Embed(title="DARE" , description=l2[0],color=0x44ff44)
    await ctx.send(embed=embed)
    
#Google Form......................................................(Suggestions Basically) 
@client.command()
async def suggest(ctx):
   google_form_link=''
   await ctx.send(f"Please fill out the suggestion form here: {google_form_link}")

# For moderation.................................................
allowed_roles = {
    "kick": {},
    "ban": {},
    "mute": {},
    "addrole": {},
    "removerole": {},
    "unmute": {}
}

def has_allowed_role(ctx, command):
    creator_role = ctx.guild.owner
    allowed = allowed_roles.get(command, [])
    return ctx.author == creator_role or any(role.id in allowed for role in ctx.author.roles)

# Set roles command
@client.command()
async def setroles(ctx, command: str, role: discord.Role, *roles_to_add: discord.Role):
    if ctx.author != ctx.guild.owner:
        await ctx.send("Only the server owner can use this command.")
        return

    command = command.lower()
    if command not in allowed_roles:
        await ctx.send("Invalid command. Please choose from 'kick', 'ban', 'mute', 'addrole', 'removerole', or 'unmute'.")
        return

    allowed_roles[command][role.name] = [r.id for r in roles_to_add]
    await ctx.send(f"Roles allowed to use {command} command have been set to: {', '.join(role.name for role in roles_to_add)}")

# Kick command
@client.command()
async def kick(ctx, member: discord.Member, *, reason=None):
    if not has_allowed_role(ctx, "kick"):
        await ctx.send("You don't have permission to use this command.")
        return

    if reason is None:
        await ctx.send("Please provide a reason for kicking the member.")
        return

    await member.kick(reason=reason)
    await ctx.send(f"{member.mention} has been kicked from the server. Reason: {reason}")

# Ban command
@client.command()
async def ban(ctx, member: discord.Member, *, reason=None):
    if not has_allowed_role(ctx, "ban"):
        await ctx.send("You don't have permission to use this command.")
        return

    if reason is None:
        await ctx.send("Please provide a reason for banning the member.")
        return

    await member.ban(reason=reason)
    await ctx.send(f"{member.mention} has been banned from the server. Reason: {reason}")

# Mute command
@client.command()
async def mute(ctx, member: discord.Member, duration: int, time_unit: str, *, reason=None):
    if not has_allowed_role(ctx, "mute"):
        await ctx.send("You don't have permission to use this command.")
        return

    if reason is None:
        await ctx.send("Please provide a reason for muting the member.")
        return

    mute_role = discord.utils.get(ctx.guild.roles, name="Muted")
    if not mute_role:
        try:
            mute_role = await ctx.guild.create_role(name="Muted", reason="To mute users")
            for channel in ctx.guild.channels:
                await channel.set_permissions(mute_role, send_messages=False)
        except discord.Forbidden:
            await ctx.send("I don't have the permissions to create roles.")
            return
        await member.add_roles(mute_role)
        await ctx.send(f"{member.mention} has been muted for {duration} {time_unit}. Reason: {reason}")
        await asyncio.sleep(convert_to_seconds(duration, time_unit))
        await member.remove_roles(mute_role)
        await ctx.send(f"{member.mention} has been unmuted after {duration} {time_unit}.")
    else:
        await member.add_roles(mute_role)
        await ctx.send(f"{member.mention} has been muted for {duration} {time_unit}. Reason: {reason}")
        await asyncio.sleep(convert_to_seconds(duration, time_unit))
        await member.remove_roles(mute_role)
        await ctx.send(f"{member.mention} has been unmuted after {duration} {time_unit}.")

def convert_to_seconds(duration, time_unit):
    if time_unit.lower() == "seconds":
        return duration
    elif time_unit.lower() == "minutes":
        return duration * 60
    elif time_unit.lower() == "hours":
        return duration * 3600
    elif time_unit.lower() == "days":
        return duration * 86400
    else:
        raise ValueError("Invalid time unit. Please use 'seconds', 'minutes', 'hours', or 'days'.")
        
# Unmute command
@client.command()
async def unmute(ctx, member: discord.Member):
    if not has_allowed_role(ctx, "unmute"):
        await ctx.send("You don't have permission to use this command.")
        return

    mute_role = discord.utils.get(ctx.guild.roles, name="Muted")
    if not mute_role:
        await ctx.send("Mute role not found.")
        return

    if mute_role in member.roles:
        await member.remove_roles(mute_role)
        await ctx.send(f"{member.mention} has been unmuted.")
    else:
        await ctx.send(f"{member.mention} is not muted.") 

# Add role command
@client.command()
async def addrole(ctx, member: discord.Member, role: discord.Role):
    if not has_allowed_role(ctx, "addrole"):
        await ctx.send("You don't have permission to use this command.")
        return

    await member.add_roles(role)
    await ctx.send(f"Added role '{role.name}' to {member.mention}.")

# Remove role command
@client.command()
async def removerole(ctx, member: discord.Member, role: discord.Role):
    if not has_allowed_role(ctx, "removerole"):
        await ctx.send("You don't have permission to use this command.")
        return

    await member.remove_roles(role)
    await ctx.send(f"Removed role '{role.name}' from {member.mention}.")

def load_banned_words():
    try:
        with open("banned_words.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_banned_words(banned_words):
    with open("banned_words.json", "w") as file:
        json.dump(banned_words, file)

banned_words_per_guild = load_banned_words()

def contains_banned_word(message_content, guild_id):
    banned_words = banned_words_per_guild.get(str(guild_id), [])
    for word in banned_words:
        if re.search(r'\b' + re.escape(word) + r'\b', message_content, re.IGNORECASE):
            return True
    return False

@client.command()
async def add_banned_word(ctx, word):
    if ctx.author.guild_permissions.administrator:
        guild_id = ctx.guild.id
        if str(guild_id) not in banned_words_per_guild:
            banned_words_per_guild[str(guild_id)] = []
        banned_words_per_guild[str(guild_id)].append(word.lower())
        save_banned_words(banned_words_per_guild)
        await ctx.send(f"'{word}' has been added to the banned words list.")
    else:
        await ctx.send("You don't have permission to use this command.")

@client.command()
async def remove_banned_word(ctx, word):
    if ctx.author.guild_permissions.administrator:
        guild_id = ctx.guild.id
        banned_words = banned_words_per_guild.get(str(guild_id), [])
        if word.lower() in banned_words:
            banned_words.remove(word.lower())
            banned_words_per_guild[str(guild_id)] = banned_words
            save_banned_words(banned_words_per_guild)
            await ctx.send(f"'{word}' has been removed from the banned words list.")
        else:
            await ctx.send(f"'{word}' is not in the banned words list.")
    else:
        await ctx.send("You don't have permission to use this command.")

@client.event
async def on_disconnect():
    save_banned_words(banned_words_per_guild)

@client.event
async def on_message(message):

    if message.author == client.user:
        return

    guild_id = message.guild.id
    if contains_banned_word(message.content, guild_id):
        await message.delete()
        await message.channel.send(f"{message.author.mention} Watch your language! That's not allowed. :x: ")

    await client.process_commands(message)
    
client.run("MTE1NDc3MzM5MjEzODk2OTIxMA.GD5_PV.pYjce5iwJtDxC9L4te53qxq7L6-HFJYbWBEgw8")  #Important 
